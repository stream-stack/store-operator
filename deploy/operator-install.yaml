apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: store-operator-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: brokers.knative.stream-stack.tanx
spec:
  group: knative.stream-stack.tanx
  names:
    kind: Broker
    listKind: BrokerList
    plural: brokers
    singular: broker
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Broker is the Schema for the brokers API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BrokerSpec defines the desired state of Broker
            properties:
              dispatcher:
                properties:
                  image:
                    type: string
                  replicas:
                    format: int32
                    type: integer
                type: object
              partition:
                properties:
                  counter:
                    description: 按照 数量，数据量，时间 三种策略进行分区
                    properties:
                      count:
                        format: int64
                        type: integer
                    required:
                    - count
                    type: object
                type: object
              publisher:
                properties:
                  image:
                    type: string
                  replicas:
                    format: int32
                    type: integer
                type: object
              selector:
                description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
                type: object
              uuid:
                type: string
            type: object
          status:
            description: BrokerStatus defines the observed state of Broker
            properties:
              dispatcher:
                properties:
                  svcName:
                    type: string
                  workloadStatus:
                    description: DeploymentStatus is the most recently observed status of the Deployment.
                    properties:
                      availableReplicas:
                        description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
                        format: int32
                        type: integer
                      collisionCount:
                        description: Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
                        format: int32
                        type: integer
                      conditions:
                        description: Represents the latest available observations of a deployment's current state.
                        items:
                          description: DeploymentCondition describes the state of a deployment at a certain point.
                          properties:
                            lastTransitionTime:
                              description: Last time the condition transitioned from one status to another.
                              format: date-time
                              type: string
                            lastUpdateTime:
                              description: The last time this condition was updated.
                              format: date-time
                              type: string
                            message:
                              description: A human readable message indicating details about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            status:
                              description: Status of the condition, one of True, False, Unknown.
                              type: string
                            type:
                              description: Type of deployment condition.
                              type: string
                          required:
                          - status
                          - type
                          type: object
                        type: array
                      observedGeneration:
                        description: The generation observed by the deployment controller.
                        format: int64
                        type: integer
                      readyReplicas:
                        description: readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
                        format: int32
                        type: integer
                      replicas:
                        description: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
                        format: int32
                        type: integer
                      unavailableReplicas:
                        description: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
                        format: int32
                        type: integer
                      updatedReplicas:
                        description: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
                        format: int32
                        type: integer
                    type: object
                type: object
              publisher:
                properties:
                  workloadStatus:
                    description: DeploymentStatus is the most recently observed status of the Deployment.
                    properties:
                      availableReplicas:
                        description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
                        format: int32
                        type: integer
                      collisionCount:
                        description: Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
                        format: int32
                        type: integer
                      conditions:
                        description: Represents the latest available observations of a deployment's current state.
                        items:
                          description: DeploymentCondition describes the state of a deployment at a certain point.
                          properties:
                            lastTransitionTime:
                              description: Last time the condition transitioned from one status to another.
                              format: date-time
                              type: string
                            lastUpdateTime:
                              description: The last time this condition was updated.
                              format: date-time
                              type: string
                            message:
                              description: A human readable message indicating details about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            status:
                              description: Status of the condition, one of True, False, Unknown.
                              type: string
                            type:
                              description: Type of deployment condition.
                              type: string
                          required:
                          - status
                          - type
                          type: object
                        type: array
                      observedGeneration:
                        description: The generation observed by the deployment controller.
                        format: int64
                        type: integer
                      readyReplicas:
                        description: readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
                        format: int32
                        type: integer
                      replicas:
                        description: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
                        format: int32
                        type: integer
                      unavailableReplicas:
                        description: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
                        format: int32
                        type: integer
                      updatedReplicas:
                        description: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
                        format: int32
                        type: integer
                    type: object
                type: object
              uuid:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: storesets.core.stream-stack.tanx
spec:
  group: core.stream-stack.tanx
  names:
    kind: StoreSet
    listKind: StoreSetList
    plural: storesets
    singular: storeset
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: StoreSet is the Schema for the storesets API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StoreSetSpec defines the desired state of StoreSet
            properties:
              store:
                properties:
                  image:
                    type: string
                  port:
                    type: string
                  replicas:
                    format: int32
                    type: integer
                type: object
              volume:
                properties:
                  capacity:
                    anyOf:
                    - type: integer
                    - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  nodeAffinity:
                    description: VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
                    properties:
                      required:
                        description: Required specifies hard node constraints that must be met.
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms. The terms are ORed.
                            items:
                              description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                    type: object
                  source:
                    description: Local represents directly-attached storage with node affinity (Beta feature)
                    properties:
                      fsType:
                        description: Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a filesystem if unspecified.
                        type: string
                      path:
                        description: The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
                        type: string
                    required:
                    - path
                    type: object
                required:
                - capacity
                type: object
            type: object
          status:
            description: StoreSetStatus defines the observed state of StoreSet
            properties:
              status:
                type: string
              store:
                properties:
                  service:
                    description: ServiceStatus represents the current status of a service.
                    properties:
                      conditions:
                        description: Current service state
                        items:
                          description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                          properties:
                            lastTransitionTime:
                              description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                              format: date-time
                              type: string
                            message:
                              description: message is a human readable message indicating details about the transition. This may be an empty string.
                              maxLength: 32768
                              type: string
                            observedGeneration:
                              description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                              format: int64
                              minimum: 0
                              type: integer
                            reason:
                              description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                              maxLength: 1024
                              minLength: 1
                              pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                              type: string
                            status:
                              description: status of the condition, one of True, False, Unknown.
                              enum:
                              - "True"
                              - "False"
                              - Unknown
                              type: string
                            type:
                              description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                              maxLength: 316
                              pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                              type: string
                          required:
                          - lastTransitionTime
                          - message
                          - reason
                          - status
                          - type
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - type
                        x-kubernetes-list-type: map
                      loadBalancer:
                        description: LoadBalancer contains the current status of the load-balancer, if one is present.
                        properties:
                          ingress:
                            description: Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
                            items:
                              description: 'LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.'
                              properties:
                                hostname:
                                  description: Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
                                  type: string
                                ip:
                                  description: IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
                                  type: string
                                ports:
                                  description: Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
                                  items:
                                    properties:
                                      error:
                                        description: 'Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)'
                                        maxLength: 316
                                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                                        type: string
                                      port:
                                        description: Port is the port number of the service port of which status is recorded here
                                        format: int32
                                        type: integer
                                      protocol:
                                        default: TCP
                                        description: 'Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"'
                                        type: string
                                    required:
                                    - port
                                    - protocol
                                    type: object
                                  type: array
                                  x-kubernetes-list-type: atomic
                              type: object
                            type: array
                        type: object
                    type: object
                  serviceName:
                    type: string
                  workload:
                    description: StatefulSetStatus represents the current state of a StatefulSet.
                    properties:
                      availableReplicas:
                        description: Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset. This is a beta field and enabled/disabled by StatefulSetMinReadySeconds feature gate.
                        format: int32
                        type: integer
                      collisionCount:
                        description: collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
                        format: int32
                        type: integer
                      conditions:
                        description: Represents the latest available observations of a statefulset's current state.
                        items:
                          description: StatefulSetCondition describes the state of a statefulset at a certain point.
                          properties:
                            lastTransitionTime:
                              description: Last time the condition transitioned from one status to another.
                              format: date-time
                              type: string
                            message:
                              description: A human readable message indicating details about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            status:
                              description: Status of the condition, one of True, False, Unknown.
                              type: string
                            type:
                              description: Type of statefulset condition.
                              type: string
                          required:
                          - status
                          - type
                          type: object
                        type: array
                      currentReplicas:
                        description: currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
                        format: int32
                        type: integer
                      currentRevision:
                        description: currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
                        type: string
                      observedGeneration:
                        description: observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
                        format: int64
                        type: integer
                      readyReplicas:
                        description: readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
                        format: int32
                        type: integer
                      replicas:
                        description: replicas is the number of Pods created by the StatefulSet controller.
                        format: int32
                        type: integer
                      updateRevision:
                        description: updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
                        type: string
                      updatedReplicas:
                        description: updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
                        format: int32
                        type: integer
                    required:
                    - availableReplicas
                    - replicas
                    type: object
                  workloadName:
                    type: string
                required:
                - service
                - serviceName
                - workload
                - workloadName
                type: object
              volume:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file'
                properties:
                  message:
                    description: A human-readable message indicating details about why the volume is in this state.
                    type: string
                  name:
                    type: string
                  phase:
                    description: 'Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase'
                    type: string
                  reason:
                    description: Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
                    type: string
                required:
                - name
                type: object
            required:
            - status
            - store
            - volume
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: streamcontrollerconfigs.config.stream-stack.tanx
spec:
  group: config.stream-stack.tanx
  names:
    kind: StreamControllerConfig
    listKind: StreamControllerConfigList
    plural: streamcontrollerconfigs
    singular: streamcontrollerconfig
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: StreamControllerConfig is the Schema for the streamcontrollerconfigs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          cacheNamespace:
            description: "CacheNamespace if specified restricts the manager's cache to watch objects in the desired namespace Defaults to all namespaces \n Note: If a namespace is specified, controllers can still Watch for a cluster-scoped resource (e.g Node).  For namespaced resources the cache will only hold objects from the desired namespace."
            type: string
          controller:
            description: Controller contains global configuration options for controllers registered within this manager.
            properties:
              cacheSyncTimeout:
                description: CacheSyncTimeout refers to the time limit set to wait for syncing caches. Defaults to 2 minutes if not set.
                format: int64
                type: integer
              groupKindConcurrency:
                additionalProperties:
                  type: integer
                description: "GroupKindConcurrency is a map from a Kind to the number of concurrent reconciliation allowed for that controller. \n When a controller is registered within this manager using the builder utilities, users have to specify the type the controller reconciles in the For(...) call. If the object's kind passed matches one of the keys in this map, the concurrency for that controller is set to the number specified. \n The key is expected to be consistent in form with GroupKind.String(), e.g. ReplicaSet in apps group (regardless of version) would be `ReplicaSet.apps`."
                type: object
            type: object
          gracefulShutDown:
            description: GracefulShutdownTimeout is the duration given to runnable to stop before the manager actually returns on stop. To disable graceful shutdown, set to time.Duration(0) To use graceful shutdown without timeout, set to a negative duration, e.G. time.Duration(-1) The graceful shutdown is skipped for safety reasons in case the leader election lease is lost.
            type: string
          health:
            description: Health contains the controller health configuration
            properties:
              healthProbeBindAddress:
                description: HealthProbeBindAddress is the TCP address that the controller should bind to for serving health probes
                type: string
              livenessEndpointName:
                description: LivenessEndpointName, defaults to "healthz"
                type: string
              readinessEndpointName:
                description: ReadinessEndpointName, defaults to "readyz"
                type: string
            type: object
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          leaderElection:
            description: LeaderElection is the LeaderElection config to be used when configuring the manager.Manager leader election
            properties:
              leaderElect:
                description: leaderElect enables a leader election client to gain leadership before executing the main loop. Enable this when running replicated components for high availability.
                type: boolean
              leaseDuration:
                description: leaseDuration is the duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.
                type: string
              renewDeadline:
                description: renewDeadline is the interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.
                type: string
              resourceLock:
                description: resourceLock indicates the resource object type that will be used to lock during leader election cycles.
                type: string
              resourceName:
                description: resourceName indicates the name of resource object that will be used to lock during leader election cycles.
                type: string
              resourceNamespace:
                description: resourceName indicates the namespace of resource object that will be used to lock during leader election cycles.
                type: string
              retryPeriod:
                description: retryPeriod is the duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.
                type: string
            required:
            - leaderElect
            - leaseDuration
            - renewDeadline
            - resourceLock
            - resourceName
            - resourceNamespace
            - retryPeriod
            type: object
          metadata:
            type: object
          metrics:
            description: Metrics contains thw controller metrics configuration
            properties:
              bindAddress:
                description: BindAddress is the TCP address that the controller should bind to for serving prometheus metrics. It can be set to "0" to disable the metrics serving.
                type: string
            type: object
          syncPeriod:
            description: SyncPeriod determines the minimum frequency at which watched resources are reconciled. A lower period will correct entropy more quickly, but reduce responsiveness to change if there are many watched resources. Change this value only if you know what you are doing. Defaults to 10 hours if unset. there will a 10 percent jitter between the SyncPeriod of all controllers so that all controllers will not send list requests simultaneously.
            type: string
          webhook:
            description: Webhook contains the controllers webhook configuration
            properties:
              certDir:
                description: CertDir is the directory that contains the server key and certificate. if not set, webhook server would look up the server key and certificate in {TempDir}/k8s-webhook-server/serving-certs. The server key and certificate must be named tls.key and tls.crt, respectively.
                type: string
              host:
                description: Host is the hostname that the webhook server binds to. It is used to set webhook.Server.Host.
                type: string
              port:
                description: Port is the port that the webhook server serves at. It is used to set webhook.Server.Port.
                type: integer
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: subscriptions.knative.stream-stack.tanx
spec:
  group: knative.stream-stack.tanx
  names:
    kind: Subscription
    listKind: SubscriptionList
    plural: subscriptions
    singular: subscription
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Subscription is the Schema for the subscriptions API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SubscriptionSpec defines the desired state of Subscription
            properties:
              broker:
                type: string
              delivery:
                properties:
                  ackDuration:
                    type: string
                  maxRequestDuration:
                    description: TODO:定义发送消息的方式
                    type: string
                  maxRetries:
                    type: integer
                type: object
              filter:
                type: object
              subscriber:
                properties:
                  pod:
                    properties:
                      namespace:
                        type: string
                      path:
                        type: string
                      port:
                        format: int32
                        type: integer
                      protocol:
                        type: string
                      selector:
                        description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
                        properties:
                          matchExpressions:
                            description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            items:
                              description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              properties:
                                key:
                                  description: key is the label key that the selector applies to.
                                  type: string
                                operator:
                                  description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  type: string
                                values:
                                  description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            type: object
                        type: object
                    type: object
                  service:
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                      path:
                        type: string
                      port:
                        format: int32
                        type: integer
                    type: object
                  uri:
                    properties:
                      protocol:
                        type: string
                      uri:
                        type: string
                    type: object
                type: object
            required:
            - broker
            type: object
          status:
            description: SubscriptionStatus defines the observed state of Subscription
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: store-operator-controller-manager
  namespace: store-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: store-operator-leader-election-role
  namespace: store-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: store-operator-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - deployments/finalizers
  verbs:
  - update
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets/finalizers
  verbs:
  - update
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - core.stream-stack.tanx
  resources:
  - storesets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - core.stream-stack.tanx
  resources:
  - storesets/finalizers
  verbs:
  - update
- apiGroups:
  - core.stream-stack.tanx
  resources:
  - storesets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - knative.stream-stack.tanx
  resources:
  - brokers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - knative.stream-stack.tanx
  resources:
  - brokers/finalizers
  verbs:
  - update
- apiGroups:
  - knative.stream-stack.tanx
  resources:
  - brokers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - knative.stream-stack.tanx
  resources:
  - subscriptions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - knative.stream-stack.tanx
  resources:
  - subscriptions/finalizers
  verbs:
  - update
- apiGroups:
  - knative.stream-stack.tanx
  resources:
  - subscriptions/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: store-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: store-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: store-operator-leader-election-rolebinding
  namespace: store-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: store-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: store-operator-controller-manager
  namespace: store-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: store-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: store-operator-manager-role
subjects:
- kind: ServiceAccount
  name: store-operator-controller-manager
  namespace: store-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: store-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: store-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: store-operator-controller-manager
  namespace: store-operator-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |-
    apiVersion: config.stream-stack.tanx/v1
    kind: StreamControllerConfig
    metadata:
      name: streamcontrollerconfig-sample
    health:
      healthProbeBindAddress: 0.0.0.0:8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: b653d154.stream-stack.tanx
kind: ConfigMap
metadata:
  name: store-operator-manager-config
  namespace: store-operator-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: store-operator-controller-manager-metrics-service
  namespace: store-operator-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  name: store-operator-webhook-service
  namespace: store-operator-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: store-operator-controller-manager
  namespace: store-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --config=controller_manager_config.yaml
        command:
        - /manager
        image: ccr.ccs.tencentyun.com/stream/operator:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        - mountPath: /controller_manager_config.yaml
          name: manager-config
          subPath: controller_manager_config.yaml
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      securityContext:
        runAsNonRoot: true
      serviceAccountName: store-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
      - configMap:
          name: store-operator-manager-config
        name: manager-config
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: store-operator-serving-cert
  namespace: store-operator-system
spec:
  dnsNames:
  - store-operator-webhook-service.store-operator-system.svc
  - store-operator-webhook-service.store-operator-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: store-operator-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: store-operator-selfsigned-issuer
  namespace: store-operator-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: store-operator-system/store-operator-serving-cert
  name: store-operator-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: store-operator-webhook-service
      namespace: store-operator-system
      path: /mutate-knative-stream-stack-tanx-v1-broker
  failurePolicy: Fail
  name: mbroker.kb.io
  rules:
  - apiGroups:
    - knative.stream-stack.tanx
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - brokers
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: store-operator-webhook-service
      namespace: store-operator-system
      path: /mutate-knative-stream-stack-tanx-v1-subscription
  failurePolicy: Fail
  name: msubscription.kb.io
  rules:
  - apiGroups:
    - knative.stream-stack.tanx
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - subscriptions
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: store-operator-webhook-service
      namespace: store-operator-system
      path: /mutate-core-stream-stack-tanx-v1-storeset
  failurePolicy: Fail
  name: mstoreset.kb.io
  rules:
  - apiGroups:
    - core.stream-stack.tanx
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - storesets
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: store-operator-system/store-operator-serving-cert
  name: store-operator-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: store-operator-webhook-service
      namespace: store-operator-system
      path: /validate-knative-stream-stack-tanx-v1-broker
  failurePolicy: Fail
  name: vbroker.kb.io
  rules:
  - apiGroups:
    - knative.stream-stack.tanx
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - brokers
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: store-operator-webhook-service
      namespace: store-operator-system
      path: /validate-knative-stream-stack-tanx-v1-subscription
  failurePolicy: Fail
  name: vsubscription.kb.io
  rules:
  - apiGroups:
    - knative.stream-stack.tanx
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - subscriptions
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: store-operator-webhook-service
      namespace: store-operator-system
      path: /validate-core-stream-stack-tanx-v1-storeset
  failurePolicy: Fail
  name: vstoreset.kb.io
  rules:
  - apiGroups:
    - core.stream-stack.tanx
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - storesets
  sideEffects: None
